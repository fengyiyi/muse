// Generated by CoffeeScript 1.3.1
(function() {
  var LOCATION_DIR, app, archive, file, fs, getDate, http, io, json, lastDate, locationName, locationNames, locations, offset, send, _i, _len;

  http = require('http');

  send = require('send');

  io = require('socket.io');

  fs = require('fs');

  LOCATION_DIR = 'store/';

  locationNames = ['dc'];

  locations = {};

  for (_i = 0, _len = locationNames.length; _i < _len; _i++) {
    locationName = locationNames[_i];
    file = LOCATION_DIR + locationName + '.json';
    json = fs.readFileSync(file);
    try {
      json = JSON.parse(json);
    } catch (e) {
      json = {
        dirty: false,
        lastChanged: new Date(),
        drawers: {}
      };
    }
    locations[locationName] = json;
  }

  setInterval((function() {
    var locationName, _fn, _j, _len1;
    _fn = function(locationName) {
      var data, locationSpec;
      locationSpec = locations[locationName];
      if (!locationSpec.dirty) {
        return;
      }
      file = LOCATION_DIR + locationName + '.json';
      data = JSON.stringify(locationSpec, null, 2);
      fs.writeFile(file, data, function(err) {
        if (err) {
          console.error("There was an error writing the file [" + file + "]", err);
        } else {
          console.log('Location file saved');
          locationSpec.dirty = false;
        }
      });
    };
    for (_j = 0, _len1 = locationNames.length; _j < _len1; _j++) {
      locationName = locationNames[_j];
      _fn(locationName);
    }
  }), 2000);

  app = http.createServer(function(req, res) {
    var error, match, redirect;
    error = function(err) {
      res.statusCode = err.status || 500;
      return res.end(err.message);
    };
    redirect = function() {
      res.statusCode = 301;
      res.setHeader('Location', req.url + '/');
      return res.end('Redirecting to ' + req.url + '/');
    };
    if (req.url === '/') {
      res.statusCode = 302;
      res.setHeader('Location', '/DC');
      res.end('Redirecting to /DC');
    } else if (match = req.url.match(/^\/([a-z]+)$/i)) {
      send(req, 'index.html').root('public').on('error', error).pipe(res);
    } else if (req.url === '/_archive') {
      archive();
      res.end('A reset has been sent');
    } else {
      send(req, req.url).root('public').on('error', error).pipe(res);
    }
  });

  io = io.listen(app);

  app.listen(8181);

  io.sockets.on('connection', function(socket) {
    var client;
    client = {};
    socket.on('addClient', function(locationStr) {
      var location;
      client.location = locationStr;
      location = locations[client.location];
      socket.join(client.location);
      socket.emit('updateDrawers', location.drawers);
    });
    socket.on('drawerChange', function(drawer, state) {
      var location;
      location = locations[client.location];
      location.drawers[drawer] = state;
      socket.broadcast.to(client.location).emit('drawerChange', drawer, state);
      location.dirty = true;
    });
  });

  archive = function() {
    var location, locationName;
    for (locationName in locations) {
      location = locations[locationName];
      location.drawers = {};
      location.dirty = true;
    }
    io.sockets.emit('reset');
  };

  offset = -7;

  getDate = function() {
    return (new Date(Date.now() + offset * 60 * 60 * 1000)).getUTCDate();
  };

  lastDate = getDate();

  setInterval((function() {
    var nowDate;
    nowDate = getDate();
    if (lastDate === nowDate) {
      return;
    }
    archive();
    return lastDate = nowDate;
  }), 10000);

}).call(this);
